// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a[0..4]=false,a[5]=true,a[6..9]=false, a[10..11]=true, a[12..15]=false, b=instruction, sel=instruction[15],
	out[0..2]=jumps, out[3]=writeM, out[4]=d2, out[5]=d1,out[6]=c6,out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2,
	out[11]=c1, out[12]=a, out[15]=i, out=newInstruction);
	
    Mux16(a=instruction, b=ALUout, sel=i, out=firstMux16Out);
	ARegister(in=firstMux16Out, load=d1, out=aRegisterOut, out[0..14]=addressM);
	DRegister(in=ALUout, load=d2,out=dRegisterOut);
	Mux16(a=aRegisterOut, b=inM, sel=a, out=secondMux16Out);
	ALU(x=dRegisterOut, y=secondMux16Out, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,out=ALUout, out=outM, zr=zr, ng=ng);
	
	DMux8Way(in=true, sel=jumps,a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
	Not(in=ng, out=notNegative);
	Not(in=zr, out=notZero);
	Or(a=zr, b=ng, out=lessOrEqual);

	
	And(a=null,b=false, out=nullOut);
	And(a=JGT,b=notZero,out=JGToutFirst);
	And(a=JGToutFirst, b=notNegative,out=JGTout);
	And(a=JEQ, b=zr, out=JEQout);
	And(a=JGE, b=notNegative, out=JGEout);
	And(a=JLT, b=ng, out=JLTout);
	And(a=JNE, b=notZero, out=JNEout);
	And(a=JLE, b=lessOrEqual, out=JLEout);
	And(a=JMP, b=true, out=JMPout);
	
	Or8Way(in[0]=nullOut, in[1]=JGTout, in[2]=JEQout, in[3]=JGEout, in[4]=JLTout, in[5]=JNEout, in[6]=JLEout,
	in[7]=JMPout, out=pcLoad);
	PC(in=aRegisterOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}