// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array theString;
	field int curLength;
	field int maxLen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	
		if(maxLength = 0){
			let maxLength = 1;   
        }
		
		let maxLen = maxLength;
		let theString = Array.new(maxLength);
		let curLength = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do theString.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return theString[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let theString[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let theString[curLength] = c;
		let curLength = curLength + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(curLength > 0){
		let curLength = curLength - 1;
		}
		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var boolean negative;
		var int value;
		var int index;
			            
		let negative = false;
        let index = 0;
		let value = 0;
			
		if(theString[0] = 45){
			let negative = true;
			let index = 1;
		}
			
		while(theString[index] < 58 & theString[index] > 47 &(~(index = curLength))){
			let value = value*10 + theString[index] - 48;
			let index = index + 1;
		}
		
		if(negative){
			let value = -value;
		}
		
		return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let curLength = 0;
		
		if (val < 0){
			let val = -val;
			do appendChar(45);
		}
		
		do int2string(val);
		return;
    }
	
	method void int2string(int val){
        var int div;
        var int mod;
        var int newChar;
        
        let div = val / 10;
        let mod = val - (div*10);
        let newChar = mod + 48; //Convert to char
        
        if(~(val < 10)) {
			do int2string(div);
            do appendChar(newChar);
        }
        else {
            do appendChar(newChar);
        }

        return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
	}

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
	}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
	}
}
